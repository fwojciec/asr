// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/asr"
	"sync"
)

// Ensure, that GetsTOCMock does implement asr.GetsTOC.
// If this is not the case, regenerate this file with moq.
var _ asr.GetsTOC = &GetsTOCMock{}

// GetsTOCMock is a mock implementation of asr.GetsTOC.
//
// 	func TestSomethingThatUsesGetsTOC(t *testing.T) {
//
// 		// make and configure a mocked asr.GetsTOC
// 		mockedGetsTOC := &GetsTOCMock{
// 			GetTOCFunc: func(ctx context.Context, url string) ([]*asr.TOCEntry, error) {
// 				panic("mock out the GetTOC method")
// 			},
// 		}
//
// 		// use mockedGetsTOC in code that requires asr.GetsTOC
// 		// and then make assertions.
//
// 	}
type GetsTOCMock struct {
	// GetTOCFunc mocks the GetTOC method.
	GetTOCFunc func(ctx context.Context, url string) ([]*asr.TOCEntry, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTOC holds details about calls to the GetTOC method.
		GetTOC []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
	}
	lockGetTOC sync.RWMutex
}

// GetTOC calls GetTOCFunc.
func (mock *GetsTOCMock) GetTOC(ctx context.Context, url string) ([]*asr.TOCEntry, error) {
	if mock.GetTOCFunc == nil {
		panic("GetsTOCMock.GetTOCFunc: method is nil but GetsTOC.GetTOC was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockGetTOC.Lock()
	mock.calls.GetTOC = append(mock.calls.GetTOC, callInfo)
	mock.lockGetTOC.Unlock()
	return mock.GetTOCFunc(ctx, url)
}

// GetTOCCalls gets all the calls that were made to GetTOC.
// Check the length with:
//     len(mockedGetsTOC.GetTOCCalls())
func (mock *GetsTOCMock) GetTOCCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockGetTOC.RLock()
	calls = mock.calls.GetTOC
	mock.lockGetTOC.RUnlock()
	return calls
}
