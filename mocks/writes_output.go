// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/fwojciec/asr"
	"io"
	"sync"
)

// Ensure, that WritesOutputMock does implement asr.WritesOutput.
// If this is not the case, regenerate this file with moq.
var _ asr.WritesOutput = &WritesOutputMock{}

// WritesOutputMock is a mock implementation of asr.WritesOutput.
//
// 	func TestSomethingThatUsesWritesOutput(t *testing.T) {
//
// 		// make and configure a mocked asr.WritesOutput
// 		mockedWritesOutput := &WritesOutputMock{
// 			WriteFunc: func(data []*asr.Service, w io.Writer) error {
// 				panic("mock out the Write method")
// 			},
// 		}
//
// 		// use mockedWritesOutput in code that requires asr.WritesOutput
// 		// and then make assertions.
//
// 	}
type WritesOutputMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(data []*asr.Service, w io.Writer) error

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// Data is the data argument value.
			Data []*asr.Service
			// W is the w argument value.
			W io.Writer
		}
	}
	lockWrite sync.RWMutex
}

// Write calls WriteFunc.
func (mock *WritesOutputMock) Write(data []*asr.Service, w io.Writer) error {
	if mock.WriteFunc == nil {
		panic("WritesOutputMock.WriteFunc: method is nil but WritesOutput.Write was just called")
	}
	callInfo := struct {
		Data []*asr.Service
		W    io.Writer
	}{
		Data: data,
		W:    w,
	}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	return mock.WriteFunc(data, w)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedWritesOutput.WriteCalls())
func (mock *WritesOutputMock) WriteCalls() []struct {
	Data []*asr.Service
	W    io.Writer
} {
	var calls []struct {
		Data []*asr.Service
		W    io.Writer
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
