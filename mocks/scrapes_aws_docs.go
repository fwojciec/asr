// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fwojciec/asr"
	"sync"
)

// Ensure, that ScrapesAWSDocsMock does implement asr.ScrapesAWSDocs.
// If this is not the case, regenerate this file with moq.
var _ asr.ScrapesAWSDocs = &ScrapesAWSDocsMock{}

// ScrapesAWSDocsMock is a mock implementation of asr.ScrapesAWSDocs.
//
// 	func TestSomethingThatUsesScrapesAWSDocs(t *testing.T) {
//
// 		// make and configure a mocked asr.ScrapesAWSDocs
// 		mockedScrapesAWSDocs := &ScrapesAWSDocsMock{
// 			ScrapeFunc: func(ctx context.Context, toc []*asr.TOCEntry) ([]*asr.Service, error) {
// 				panic("mock out the Scrape method")
// 			},
// 		}
//
// 		// use mockedScrapesAWSDocs in code that requires asr.ScrapesAWSDocs
// 		// and then make assertions.
//
// 	}
type ScrapesAWSDocsMock struct {
	// ScrapeFunc mocks the Scrape method.
	ScrapeFunc func(ctx context.Context, toc []*asr.TOCEntry) ([]*asr.Service, error)

	// calls tracks calls to the methods.
	calls struct {
		// Scrape holds details about calls to the Scrape method.
		Scrape []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Toc is the toc argument value.
			Toc []*asr.TOCEntry
		}
	}
	lockScrape sync.RWMutex
}

// Scrape calls ScrapeFunc.
func (mock *ScrapesAWSDocsMock) Scrape(ctx context.Context, toc []*asr.TOCEntry) ([]*asr.Service, error) {
	if mock.ScrapeFunc == nil {
		panic("ScrapesAWSDocsMock.ScrapeFunc: method is nil but ScrapesAWSDocs.Scrape was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Toc []*asr.TOCEntry
	}{
		Ctx: ctx,
		Toc: toc,
	}
	mock.lockScrape.Lock()
	mock.calls.Scrape = append(mock.calls.Scrape, callInfo)
	mock.lockScrape.Unlock()
	return mock.ScrapeFunc(ctx, toc)
}

// ScrapeCalls gets all the calls that were made to Scrape.
// Check the length with:
//     len(mockedScrapesAWSDocs.ScrapeCalls())
func (mock *ScrapesAWSDocsMock) ScrapeCalls() []struct {
	Ctx context.Context
	Toc []*asr.TOCEntry
} {
	var calls []struct {
		Ctx context.Context
		Toc []*asr.TOCEntry
	}
	mock.lockScrape.RLock()
	calls = mock.calls.Scrape
	mock.lockScrape.RUnlock()
	return calls
}
